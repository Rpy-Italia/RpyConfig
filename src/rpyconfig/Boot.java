/*
* Copyright (C) <2012>  <Marchegiano Danilo>
*
* This file is part of RpyConfig.
*
* RpyConfig is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

package rpyconfig;

import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author d4n1x
 */
public class Boot extends javax.swing.JFrame {

    static private Boot boot = new Boot();
    static private arrayMaker array;
    /**
     * Creates new form Boot
     */
    public Boot() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        kerneladdres = new javax.swing.JTextField();
        kernel = new javax.swing.JTextField();
        cmdline = new javax.swing.JTextField();
        ramfsfile = new javax.swing.JTextField();
        ramfsaddr = new javax.swing.JTextField();
        initramfs = new javax.swing.JTextField();
        device_tree_address = new javax.swing.JTextField();
        init_uart_baud = new javax.swing.JTextField();
        init_uart_clock = new javax.swing.JTextField();
        init_emmc_clock = new javax.swing.JTextField();
        boot_delay_ms = new javax.swing.JTextField();
        ckdisablecommandline = new javax.swing.JCheckBox();
        ckchangecmdline = new javax.swing.JCheckBox();
        ckchangekernel = new javax.swing.JCheckBox();
        ckaddrldkernel = new javax.swing.JCheckBox();
        ckramfsload = new javax.swing.JCheckBox();
        ckaddrloadramfs = new javax.swing.JCheckBox();
        ckramfsfileandaddrload = new javax.swing.JCheckBox();
        ckaddrestoloaddevicetree = new javax.swing.JCheckBox();
        ckinituartbaudrate = new javax.swing.JCheckBox();
        ckinituartclock = new javax.swing.JCheckBox();
        ckinitemmcclock = new javax.swing.JCheckBox();
        ckwaitnumsec = new javax.swing.JCheckBox();
        ckwaitnummillbefkernel = new javax.swing.JCheckBox();
        cksafemodeboot = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Boot settings");
        setIconImage(Toolkit.getDefaultToolkit().getImage(Home.class.getResource("icon.png")));
        setResizable(false);

        jButton1.setFont(jButton1.getFont());
        jButton1.setText("Ok");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ok(evt);
            }
        });

        kerneladdres.setFont(kerneladdres.getFont());
        kerneladdres.setEnabled(false);

        kernel.setFont(kernel.getFont());
        kernel.setEnabled(false);

        cmdline.setFont(cmdline.getFont());
        cmdline.setEnabled(false);

        ramfsfile.setFont(ramfsfile.getFont());
        ramfsfile.setEnabled(false);

        ramfsaddr.setFont(ramfsaddr.getFont());
        ramfsaddr.setEnabled(false);

        initramfs.setFont(initramfs.getFont());
        initramfs.setEnabled(false);

        device_tree_address.setFont(device_tree_address.getFont());
        device_tree_address.setEnabled(false);

        init_uart_baud.setFont(init_uart_baud.getFont());
        init_uart_baud.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        init_uart_baud.setText("115200");
        init_uart_baud.setEnabled(false);

        init_uart_clock.setFont(init_uart_clock.getFont());
        init_uart_clock.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        init_uart_clock.setText("3000000");
        init_uart_clock.setEnabled(false);

        init_emmc_clock.setFont(init_emmc_clock.getFont());
        init_emmc_clock.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        init_emmc_clock.setText("50000000");
        init_emmc_clock.setEnabled(false);

        boot_delay_ms.setFont(boot_delay_ms.getFont());
        boot_delay_ms.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        boot_delay_ms.setText("0");
        boot_delay_ms.setEnabled(false);

        ckdisablecommandline.setText("Disable commandline tags:");

        ckchangecmdline.setText("Change cmdline.txt name to:");
        ckchangecmdline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chcmdlineOnOff(evt);
            }
        });

        ckchangekernel.setText("Change kernel.img name  to:");
        ckchangekernel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkernelnameOnOff(evt);
            }
        });

        ckaddrldkernel.setText("Address to load kernel.img file at:");
        ckaddrldkernel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adrkernelfileOnOff(evt);
            }
        });

        ckramfsload.setText("Ramfs file to load:");
        ckramfsload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ramfsfileloadOnOff(evt);
            }
        });

        ckaddrloadramfs.setText("Address to load ramfs file at:");
        ckaddrloadramfs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addrloadramfsfileOnOff(evt);
            }
        });

        ckramfsfileandaddrload.setText("Ramfs file and adress to load it at:");
        ckramfsfileandaddrload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ramfsaddrloadOnOff(evt);
            }
        });

        ckaddrestoloaddevicetree.setText("Address to load device tree at:");
        ckaddrestoloaddevicetree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addrloaddevicetreeOnOff(evt);
            }
        });

        ckinituartbaudrate.setText("Initial uart baud rate. Default 115200:");
        ckinituartbaudrate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                initbaudrateOnOff(evt);
            }
        });

        ckinituartclock.setText("Iinitial uart clock. Default 3000000 (3Mhz):");
        ckinituartclock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inituartclockOnOff(evt);
            }
        });

        ckinitemmcclock.setText("Initial emmc clock. Default 50000000 (50MHz):");
        ckinitemmcclock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                initemmcckOnOff(evt);
            }
        });

        ckwaitnumsec.setText("Boot delay (Default 1):");

        ckwaitnummillbefkernel.setText("Wait number of milliseconds in start.elf before loading kernel. Default 0:");
        ckwaitnummillbefkernel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                milisecondwaitnumstartOnOff(evt);
            }
        });

        cksafemodeboot.setText("Safe_mode boot won't be enabled:");

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()+8f));
        jLabel1.setText("Boot settings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ckchangecmdline)
                                    .addComponent(ckchangekernel)
                                    .addComponent(ckaddrldkernel)
                                    .addComponent(ckramfsload)
                                    .addComponent(ckaddrloadramfs)
                                    .addComponent(ckramfsfileandaddrload)
                                    .addComponent(ckaddrestoloaddevicetree)
                                    .addComponent(ckinituartbaudrate)
                                    .addComponent(ckinituartclock)
                                    .addComponent(ckinitemmcclock)
                                    .addComponent(ckwaitnumsec)
                                    .addComponent(ckwaitnummillbefkernel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(kernel)
                                    .addComponent(kerneladdres)
                                    .addComponent(ramfsfile)
                                    .addComponent(ramfsaddr)
                                    .addComponent(initramfs)
                                    .addComponent(device_tree_address)
                                    .addComponent(init_uart_baud)
                                    .addComponent(boot_delay_ms)
                                    .addComponent(init_uart_clock)
                                    .addComponent(init_emmc_clock)
                                    .addComponent(cmdline, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ckdisablecommandline, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cksafemodeboot, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckdisablecommandline)
                .addGap(6, 6, 6)
                .addComponent(cksafemodeboot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckchangecmdline))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kernel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckchangekernel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kerneladdres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckaddrldkernel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ramfsfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckramfsload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ramfsaddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckaddrloadramfs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initramfs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckramfsfileandaddrload))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(device_tree_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckaddrestoloaddevicetree))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(init_uart_baud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckinituartbaudrate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(init_uart_clock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckinituartclock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(init_emmc_clock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckinitemmcclock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckwaitnumsec)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boot_delay_ms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckwaitnummillbefkernel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ok(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ok
        String disable_commandline_tags = null;
        String avoid_safe_mode = null;
        String vcmdline = null;
        String vkernel = null;
        String kernel_address = null;
        String vramfsfile = null;
        String vramfsaddr = null;
        String vinitramfs = null;
        String vdevice_tree_address = null;
        String vinit_uart_baud = null;
        String vinit_uart_clock = null;
        String vinit_emmc_clock = null;
        String vboot_delay = null;
        String vboot_delay_ms = null;

        //do
        if(ckdisablecommandline.isSelected()){
            disable_commandline_tags = "disable_commandline_tags=1";
        }

            //do
        if(cksafemodeboot.isSelected()){
            avoid_safe_mode = "avoid_safe_mode=1";
        }

            //do
        if(ckchangecmdline.isSelected()){
            if(cmdline.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vcmdline = "cmdline=" + cmdline.getText();
        }

            //do
        if(ckchangekernel.isSelected()){
            if(kernel.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vkernel = "kernel=" + kernel.getText();
        }

            //do
        if(ckaddrldkernel.isSelected()){
            if(kerneladdres.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else kernel_address = "kernel_address=" + kerneladdres.getText();
        }

            //do
        if(ckramfsload.isSelected()){
            if(ramfsfile.getText().length() == 0 ){
                new errorEmpety().main(null);
                return;
            }else vcmdline = "ramfsfile=" + ramfsfile.getText();
        }

            //do
        if(ckaddrloadramfs.isSelected()){
            if(ramfsaddr.getText().length() == 0 ){
                new errorEmpety().main(null);
                return;
            }else vramfsaddr = "ramfsaddr=" + ramfsaddr.getText();
        }

            //do
        if(ckramfsfileandaddrload.isSelected()){
            if(initramfs.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vinitramfs = "initramfs " + initramfs.getText();
        }

            //do
        if(ckaddrestoloaddevicetree.isSelected()){
            if(device_tree_address.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vdevice_tree_address = "device_tree_address=" + device_tree_address.getText();
        }

            //do
        if(ckinituartbaudrate.isSelected()){
            if(init_uart_baud.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vinit_uart_baud = "init_uart_baud=" + init_uart_baud.getText();
        }

            //do
        if(ckinituartclock.isSelected()){
            if(init_uart_clock.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vinit_uart_clock = "init_uart_clock=" + init_uart_clock.getText();
        }

            //do
        if(ckinitemmcclock.isSelected()){
            if(init_emmc_clock.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vinit_emmc_clock = "init_emmc_clock=" + init_emmc_clock.getText();
        }

            //do
        if(ckwaitnumsec.isSelected()){
            vboot_delay = "boot_delay=0";
        }

            //do
        if(ckwaitnummillbefkernel.isSelected()){
            if(boot_delay_ms.getText().length() == 0){
                new errorEmpety().main(null);
                return;
            }else vboot_delay_ms = "boot_delay=" + boot_delay_ms.getText();
        }

        /*
         *Put in the arrya: disable_commandline_tags, avoid_safe_mode, vcmdline, vkernel, kernel_address, vramfsfile, vramfsaddr, vinitramfs,  
         * vdevice_tree_address, vinit_uart_baud, vinit_uart_clock, vinit_emmc_clock, vboot_delay, vboot_delay_ms
         */

        if(disable_commandline_tags != null) array.addElement(disable_commandline_tags);
        if(avoid_safe_mode != null) array.addElement(avoid_safe_mode);
        if(vcmdline != null) array.addElement(vcmdline);
        if(vkernel != null) array.addElement(vkernel);
        if(kernel_address != null) array.addElement(kernel_address);
        if(vramfsfile != null) array.addElement(vramfsfile);
        if(vramfsaddr != null) array.addElement(vramfsaddr);
        if(vinitramfs != null) array.addElement(vinitramfs);
        if(vdevice_tree_address != null) array.addElement(vdevice_tree_address);
        if(vinit_uart_baud != null) array.addElement(vinit_uart_baud);
        if(vinit_uart_clock != null) array.addElement(vinit_uart_clock);
        if(vinit_emmc_clock != null) array.addElement(vinit_emmc_clock);
        if(vboot_delay != null) array.addElement(vboot_delay);
        if(vboot_delay_ms != null) array.addElement(vboot_delay_ms);    

        boot.setVisible(false);
    }//GEN-LAST:event_ok

    private void chcmdlineOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chcmdlineOnOff
        if(ckchangecmdline.isSelected()){
            cmdline.setEnabled(true);
        }else cmdline.setEnabled(false);
        cmdline.repaint();
    }//GEN-LAST:event_chcmdlineOnOff

    private void chkernelnameOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkernelnameOnOff
        if(ckchangekernel.isSelected()){
            kernel.setEnabled(true);
        }else kernel.setEnabled(false);
        kernel.repaint();
    }//GEN-LAST:event_chkernelnameOnOff

    private void adrkernelfileOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adrkernelfileOnOff
        if(ckaddrldkernel.isSelected()){
            kerneladdres.setEnabled(true);
        }else kerneladdres.setEnabled(false);
        kerneladdres.repaint();        
    }//GEN-LAST:event_adrkernelfileOnOff

    private void ramfsfileloadOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ramfsfileloadOnOff
        if(ckramfsload.isSelected()){
            ramfsfile.setEnabled(true);
        }else ramfsfile.setEnabled(false);
        ramfsfile.repaint(); 
    }//GEN-LAST:event_ramfsfileloadOnOff

    private void addrloadramfsfileOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addrloadramfsfileOnOff
        if(ckaddrloadramfs.isSelected()){
            ramfsaddr.setEnabled(true);
        }else ramfsaddr.setEnabled(false);
        ramfsaddr.repaint(); 
    }//GEN-LAST:event_addrloadramfsfileOnOff

    private void ramfsaddrloadOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ramfsaddrloadOnOff
        if(ckramfsfileandaddrload.isSelected()){
            initramfs.setEnabled(true);
        }else initramfs.setEnabled(false);
        initramfs.repaint(); 
    }//GEN-LAST:event_ramfsaddrloadOnOff

    private void addrloaddevicetreeOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addrloaddevicetreeOnOff
        if(ckaddrestoloaddevicetree.isSelected()){
            device_tree_address.setEnabled(true);
        }else device_tree_address.setEnabled(false);
        device_tree_address.repaint(); 
    }//GEN-LAST:event_addrloaddevicetreeOnOff

    private void initbaudrateOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_initbaudrateOnOff
        if(ckinituartbaudrate.isSelected()){
            init_uart_baud.setEnabled(true);
        }else init_uart_baud.setEnabled(false);
        init_uart_baud.repaint(); 
    }//GEN-LAST:event_initbaudrateOnOff

    private void inituartclockOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inituartclockOnOff
        if(ckinituartclock.isSelected()){
            init_uart_clock.setEnabled(true);
        }else init_uart_clock.setEnabled(false);
        init_uart_clock.repaint(); 
    }//GEN-LAST:event_inituartclockOnOff

    private void initemmcckOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_initemmcckOnOff
        if(ckinitemmcclock.isSelected()){
            init_emmc_clock.setEnabled(true);
        }else init_emmc_clock.setEnabled(false);
        init_emmc_clock.repaint(); 
    }//GEN-LAST:event_initemmcckOnOff

    private void milisecondwaitnumstartOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_milisecondwaitnumstartOnOff
        if(ckwaitnummillbefkernel.isSelected()){
            boot_delay_ms.setEnabled(true);
        }else boot_delay_ms.setEnabled(false);
        boot_delay_ms.repaint();
    }//GEN-LAST:event_milisecondwaitnumstartOnOff

    /**
     * @param args the command line arguments
     */
    public static void main(arrayMaker mkArray) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Boot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Boot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Boot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Boot.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        array = mkArray;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    
                // Determine the new location of the window
                int w = boot.getSize().width;
                int h = boot.getSize().height;
                int x = (dim.width-w)/2;
                int y = (dim.height-h)/2;
    
                // Move the window
                boot.setLocation(x, y);
                boot.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField boot_delay_ms;
    private javax.swing.JCheckBox ckaddrestoloaddevicetree;
    private javax.swing.JCheckBox ckaddrldkernel;
    private javax.swing.JCheckBox ckaddrloadramfs;
    private javax.swing.JCheckBox ckchangecmdline;
    private javax.swing.JCheckBox ckchangekernel;
    private javax.swing.JCheckBox ckdisablecommandline;
    private javax.swing.JCheckBox ckinitemmcclock;
    private javax.swing.JCheckBox ckinituartbaudrate;
    private javax.swing.JCheckBox ckinituartclock;
    private javax.swing.JCheckBox ckramfsfileandaddrload;
    private javax.swing.JCheckBox ckramfsload;
    private javax.swing.JCheckBox cksafemodeboot;
    private javax.swing.JCheckBox ckwaitnummillbefkernel;
    private javax.swing.JCheckBox ckwaitnumsec;
    private javax.swing.JTextField cmdline;
    private javax.swing.JTextField device_tree_address;
    private javax.swing.JTextField init_emmc_clock;
    private javax.swing.JTextField init_uart_baud;
    private javax.swing.JTextField init_uart_clock;
    private javax.swing.JTextField initramfs;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField kernel;
    private javax.swing.JTextField kerneladdres;
    private javax.swing.JTextField ramfsaddr;
    private javax.swing.JTextField ramfsfile;
    // End of variables declaration//GEN-END:variables
}
