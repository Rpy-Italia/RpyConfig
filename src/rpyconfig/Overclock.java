/*
* Copyright (C) <2012>  <Marchegiano Danilo>
*
* This file is part of RpyConfig.
*
* RpyConfig is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

package rpyconfig;

import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author d4n1x
 */
public class Overclock extends javax.swing.JFrame {

    static private Overclock overclock = new Overclock();
    static private arrayMaker array;
    static private arrayMaker arrayOva;
    /**
     * Creates new form Overclock
     */
    public Overclock() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        arm_freq = new javax.swing.JSpinner();
        gpu_freq = new javax.swing.JSpinner();
        core_freq = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        h264_freq = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        isp_freq = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        v3d_freq = new javax.swing.JSpinner();
        avoid_pwm_pll = new javax.swing.JSpinner();
        jLabel28 = new javax.swing.JLabel();
        sdram_freq = new javax.swing.JSpinner();
        ckfreqarm = new javax.swing.JCheckBox();
        cksetfreqgpu = new javax.swing.JCheckBox();
        ckfreqgpu = new javax.swing.JCheckBox();
        ckfreqhwvideoblock = new javax.swing.JCheckBox();
        ckfreqimagsensor = new javax.swing.JCheckBox();
        ckfreq3dblk = new javax.swing.JCheckBox();
        ckunlinkcorefreq = new javax.swing.JCheckBox();
        ckfreqsdram = new javax.swing.JCheckBox();
        ckforceturbo = new javax.swing.JCheckBox();
        ckminvalarmfreq = new javax.swing.JCheckBox();
        ckcorefreqmin = new javax.swing.JCheckBox();
        cksdramfreqmin = new javax.swing.JCheckBox();
        cktemplimit = new javax.swing.JCheckBox();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        minvalarmfreq = new javax.swing.JSpinner();
        ckinitial_turbo = new javax.swing.JCheckBox();
        corefreqmin = new javax.swing.JSpinner();
        sdramfreqmin = new javax.swing.JSpinner();
        templimit = new javax.swing.JSpinner();
        ckcurrent_limit_override = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Overclock settings");
        setResizable(false);
        setUndecorated(true);

        jButton1.setText("Ok");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ok(evt);
            }
        });

        arm_freq.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        arm_freq.setEnabled(false);
        arm_freq.setValue(700);

        gpu_freq.setEnabled(false);
        gpu_freq.setValue(250);

        core_freq.setEnabled(false);
        core_freq.setValue(250);

        jLabel5.setText("mhz");

        jLabel6.setText("mhz");

        jLabel7.setText("mhz");

        jLabel9.setText("mhz");

        h264_freq.setEnabled(false);
        h264_freq.setValue(250);

        jLabel25.setText("mhz");

        isp_freq.setEnabled(false);
        isp_freq.setValue(250);

        jLabel26.setText("mhz");

        jLabel27.setText("mhz");

        v3d_freq.setEnabled(false);
        v3d_freq.setValue(250);

        avoid_pwm_pll.setEnabled(false);

        jLabel28.setText("mhz");

        sdram_freq.setEnabled(false);
        sdram_freq.setValue(400);

        ckfreqarm.setText("Set ARM frequency  (Default 700):");
        ckfreqarm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freqarmOnOff(evt);
            }
        });

        cksetfreqgpu.setText("Set GPU frequency (Default 250):");
        cksetfreqgpu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gpufreqOnOff(evt);
            }
        });

        ckfreqgpu.setText("Set frequency of GPU processor core. (Default 250):");
        ckfreqgpu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                greqcoregpuOnOff(evt);
            }
        });

        ckfreqhwvideoblock.setText("Frequency of hardware video block in MHz. Default 250:");
        ckfreqhwvideoblock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freqhwvdblvkOnOff(evt);
            }
        });

        ckfreqimagsensor.setText("Frequency of image sensor pipeline block in MHz. Default 250:");
        ckfreqimagsensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freqimagesensorOnOff(evt);
            }
        });

        ckfreq3dblk.setText("Frequency of 3D block in MHz. Default 250:");
        ckfreq3dblk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freq3dOnOff(evt);
            }
        });

        ckunlinkcorefreq.setText("Unlink core freq from the rest of the gpu.Default 0:");
        ckunlinkcorefreq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unlinkcorefreqOnOff(evt);
            }
        });

        ckfreqsdram.setText("Frequency of SDRAM in MHz. Default 400:");
        ckfreqsdram.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                freqsdramOnOff(evt);
            }
        });

        ckforceturbo.setText("Force turbo");

        ckminvalarmfreq.setText("Minimum value of arm_freq used for dynamic clocking. Default 700:");
        ckminvalarmfreq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minvalarmfreOnOff(evt);
            }
        });

        ckcorefreqmin.setText("Minimum value of core_freq used for dynamic clocking. Default 250:");
        ckcorefreqmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minvalcorefreqOnOff(evt);
            }
        });

        cksdramfreqmin.setText("Minimum value of sdram_freq used for dynamic clocking. Default 400:");
        cksdramfreqmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sdramfreqminOnOff(evt);
            }
        });

        cktemplimit.setText("Overheat protection.Setting this higher than default voids warranty. Default 85 :");
        cktemplimit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                templimitOnOff(evt);
            }
        });

        jLabel29.setText("mhz");

        jLabel30.setText("mhz");

        jLabel31.setText("mhz");

        jLabel10.setText("CÂ°");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 20)); // NOI18N
        jLabel1.setText("Overclock settings");

        jButton2.setText("Overvoltage");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                advoverclock(evt);
            }
        });

        minvalarmfreq.setEnabled(false);
        minvalarmfreq.setValue(700);

        ckinitial_turbo.setText("Enable turbo mode from boot");

        corefreqmin.setEnabled(false);
        corefreqmin.setValue(250);

        sdramfreqmin.setEnabled(false);
        sdramfreqmin.setValue(400);

        templimit.setEnabled(false);
        templimit.setValue(85);

        ckcurrent_limit_override.setText("Current limit override  ( help if you are currently hitting a reboot failure when overclocking too high)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckfreqhwvideoblock)
                            .addComponent(ckfreqimagsensor)
                            .addComponent(ckunlinkcorefreq)
                            .addComponent(ckfreqsdram)
                            .addComponent(ckfreqarm)
                            .addComponent(ckfreq3dblk))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(h264_freq)
                                    .addComponent(isp_freq)
                                    .addComponent(v3d_freq)
                                    .addComponent(avoid_pwm_pll)
                                    .addComponent(arm_freq, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sdram_freq, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ckfreqgpu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cksetfreqgpu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gpu_freq, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(core_freq)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ckminvalarmfreq)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minvalarmfreq, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckcorefreqmin)
                            .addComponent(cksdramfreqmin)
                            .addComponent(ckcurrent_limit_override))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sdramfreqmin, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(corefreqmin))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cktemplimit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(templimit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckinitial_turbo)
                            .addComponent(ckforceturbo)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(339, 339, 339)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckfreqarm)
                    .addComponent(jLabel5)
                    .addComponent(arm_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gpu_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cksetfreqgpu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(core_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(ckfreqgpu))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(h264_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(ckfreqhwvideoblock))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isp_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(ckfreqimagsensor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(v3d_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(ckfreq3dblk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avoid_pwm_pll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(ckunlinkcorefreq))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sdram_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(ckfreqsdram))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckforceturbo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckinitial_turbo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(ckminvalarmfreq)
                    .addComponent(minvalarmfreq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(ckcorefreqmin)
                    .addComponent(corefreqmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cksdramfreqmin)
                    .addComponent(jLabel31)
                    .addComponent(sdramfreqmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cktemplimit)
                    .addComponent(templimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckcurrent_limit_override)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void advoverclock(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advoverclock
        new Nowaranty().main(arrayOva);
    }//GEN-LAST:event_advoverclock

    private void freqarmOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freqarmOnOff
        if(ckfreqarm.isSelected()){
            arm_freq.setEnabled(true);
        }else arm_freq.setEnabled(false);
        arm_freq.repaint();
    }//GEN-LAST:event_freqarmOnOff

    private void gpufreqOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gpufreqOnOff
        if(cksetfreqgpu.isSelected()){
            gpu_freq.setEnabled(true);
        }else gpu_freq.setEnabled(false);
        gpu_freq.repaint();
    }//GEN-LAST:event_gpufreqOnOff

    private void greqcoregpuOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greqcoregpuOnOff
        if(ckfreqgpu.isSelected()){
            core_freq.setEnabled(true);
        }else core_freq.setEnabled(false);
        core_freq.repaint();
    }//GEN-LAST:event_greqcoregpuOnOff

    private void freqhwvdblvkOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freqhwvdblvkOnOff
        if(ckfreqhwvideoblock.isSelected()){
            h264_freq.setEnabled(true);
        }else h264_freq.setEnabled(false);
        h264_freq.repaint();
    }//GEN-LAST:event_freqhwvdblvkOnOff

    private void freqimagesensorOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freqimagesensorOnOff
        if(ckfreqimagsensor.isSelected()){
            isp_freq.setEnabled(true);
        }else isp_freq.setEnabled(false);
        isp_freq.repaint();
    }//GEN-LAST:event_freqimagesensorOnOff

    private void freq3dOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freq3dOnOff
        if(ckfreq3dblk.isSelected()){
            v3d_freq.setEnabled(true);
        }else v3d_freq.setEnabled(false);
        v3d_freq.repaint();
    }//GEN-LAST:event_freq3dOnOff

    private void unlinkcorefreqOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unlinkcorefreqOnOff
        if(ckunlinkcorefreq.isSelected()){
            avoid_pwm_pll.setEnabled(true);
        }else avoid_pwm_pll.setEnabled(false);
        avoid_pwm_pll.repaint();
    }//GEN-LAST:event_unlinkcorefreqOnOff

    private void freqsdramOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_freqsdramOnOff
        if(ckfreqsdram.isSelected()){
            sdram_freq.setEnabled(true);
        }else sdram_freq.setEnabled(false);
        sdram_freq.repaint();
    }//GEN-LAST:event_freqsdramOnOff

    private void minvalarmfreOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minvalarmfreOnOff
        if(ckminvalarmfreq.isSelected()){
            minvalarmfreq.setEnabled(true);
        }else minvalarmfreq.setEnabled(false);
        minvalarmfreq.repaint();
    }//GEN-LAST:event_minvalarmfreOnOff

    private void minvalcorefreqOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minvalcorefreqOnOff
        if(ckcorefreqmin.isSelected()){
            corefreqmin.setEnabled(true);
        }else corefreqmin.setEnabled(false);
        corefreqmin.repaint();
    }//GEN-LAST:event_minvalcorefreqOnOff

    private void sdramfreqminOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sdramfreqminOnOff
        if(cksdramfreqmin.isSelected()){
            sdramfreqmin.setEnabled(true);
        }else sdramfreqmin.setEnabled(false);
        sdramfreqmin.repaint();
    }//GEN-LAST:event_sdramfreqminOnOff

    private void templimitOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_templimitOnOff
        if(cktemplimit.isSelected()){
            templimit.setEnabled(true);
        }else templimit.setEnabled(false);
        templimit.repaint();
    }//GEN-LAST:event_templimitOnOff

    private void ok(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ok
        
        String varm_freq = null;
        String vgpu_freq = null;
        String vcore_freq = null;
        String vh264_freq = null;
        String visp_freq = null;
        String vv3d_freq = null;
        String vavoid_pwm_pll = null;
        String vsdram_freq = null;
        String vforce_turbo = null;
        String vinitial_turbo = null;
        String vminvalarmfreq = null;
        String vcorefreqmin = null;
        String vsdram_freq_min = null;
        String vtemp_limit = null;
        String vcurrent_limit_override = null;
        
        if(ckfreqarm.isSelected()){
            
            varm_freq = "arm_freq=" + arm_freq.getValue().toString();
        }
        
        if(cksetfreqgpu.isSelected()){
            vgpu_freq = "gpu_freq=" + gpu_freq.getValue().toString();
        }
        
        if(ckfreqgpu.isSelected()){
            vcore_freq = "core_freq=" + core_freq.getValue().toString();
        }
        
        if(ckfreqhwvideoblock.isSelected()){
            vh264_freq = "h264_freq=" + h264_freq.getValue().toString();
        }
        
        if(ckfreqimagsensor.isSelected()){
            visp_freq = "isp_freq=" + isp_freq.getValue().toString();
        }
        
        if(ckfreq3dblk.isSelected()){
            vv3d_freq = "v3d_freq=" + v3d_freq.getValue().toString();
        }
        
        if(ckunlinkcorefreq.isSelected()){
            vavoid_pwm_pll = "avoid_pwm_pll=" + avoid_pwm_pll.getValue().toString();
        }
        
        if(ckfreqsdram.isSelected()){
            vsdram_freq = "sdram_freq=" + sdram_freq.getValue().toString();
        }
        
        if(ckforceturbo.isSelected()){
            vforce_turbo = "force_turbo=1";
        }
        
        if(ckinitial_turbo.isSelected()){
            vinitial_turbo = "initial_turbo=1";
        }
        
        if(ckminvalarmfreq.isSelected()){
            vminvalarmfreq = "arm_freq_min=" + minvalarmfreq.getValue().toString();
        }
        
        if(ckcorefreqmin.isSelected()){
            vcorefreqmin = "core_freq_min=" + corefreqmin.getValue().toString();
        }
        
        if(cksdramfreqmin.isSelected()){
            vsdram_freq_min = "sdram_freq_min=" + sdramfreqmin.getValue().toString();
        }
        
        if(cktemplimit.isSelected()){
            vtemp_limit = "temp_limit=" + templimit.getValue().toString();
        }
        
        if(ckcurrent_limit_override.isSelected()){
            vcurrent_limit_override = "current_limit_override=0x5A000020";
        }
        
        /*varm_freq, vgpu_freq, vcore_freq, vh264_freq, visp_freq, vv3d_freq, vavoid_pwm_pll, vsdram_freq,
        vforce_turbo, vinitial_turbo, vminvalarmfreq, vcorefreqmin, vsdram_freq_min, vtemp_limit, vcurrent_limit_override*/
        
        if(varm_freq != null) array.addElement(varm_freq);
        if(vgpu_freq != null) array.addElement(vgpu_freq);
        if(vcore_freq != null) array.addElement(vcore_freq);
        if(vh264_freq != null)array.addElement(vh264_freq);
        if(visp_freq != null) array.addElement(visp_freq);
        if(vv3d_freq != null) array.addElement(vv3d_freq);
        if(vavoid_pwm_pll != null) array.addElement(vavoid_pwm_pll);
        if(vsdram_freq != null) array.addElement(vsdram_freq);
        if(vforce_turbo != null) array.addElement(vforce_turbo);
        if(vinitial_turbo != null) array.addElement(vinitial_turbo);
        if(vminvalarmfreq != null) array.addElement(vminvalarmfreq);
        if(vcorefreqmin != null) array.addElement(vcorefreqmin);
        if(vsdram_freq_min != null) array.addElement(vsdram_freq_min);
        if(vtemp_limit != null) array.addElement(vtemp_limit);
        if(vcurrent_limit_override != null) array.addElement(vcurrent_limit_override);
            
        overclock.setVisible(false);
    }//GEN-LAST:event_ok

    /**
     * @param args the command line arguments
     */
    public static void main(arrayMaker mkArray, arrayMaker nomkArray) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Overclock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Overclock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Overclock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Overclock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        array = mkArray;
        arrayOva = nomkArray;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    
                // Determine the new location of the window
                int w = overclock.getSize().width;
                int h = overclock.getSize().height;
                int x = (dim.width-w)/2;
                int y = (dim.height-h)/2;
    
                // Move the window
                overclock.setLocation(x, y);
                overclock.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner arm_freq;
    private javax.swing.JSpinner avoid_pwm_pll;
    private javax.swing.JCheckBox ckcorefreqmin;
    private javax.swing.JCheckBox ckcurrent_limit_override;
    private javax.swing.JCheckBox ckforceturbo;
    private javax.swing.JCheckBox ckfreq3dblk;
    private javax.swing.JCheckBox ckfreqarm;
    private javax.swing.JCheckBox ckfreqgpu;
    private javax.swing.JCheckBox ckfreqhwvideoblock;
    private javax.swing.JCheckBox ckfreqimagsensor;
    private javax.swing.JCheckBox ckfreqsdram;
    private javax.swing.JCheckBox ckinitial_turbo;
    private javax.swing.JCheckBox ckminvalarmfreq;
    private javax.swing.JCheckBox cksdramfreqmin;
    private javax.swing.JCheckBox cksetfreqgpu;
    private javax.swing.JCheckBox cktemplimit;
    private javax.swing.JCheckBox ckunlinkcorefreq;
    private javax.swing.JSpinner core_freq;
    private javax.swing.JSpinner corefreqmin;
    private javax.swing.JSpinner gpu_freq;
    private javax.swing.JSpinner h264_freq;
    private javax.swing.JSpinner isp_freq;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSpinner minvalarmfreq;
    private javax.swing.JSpinner sdram_freq;
    private javax.swing.JSpinner sdramfreqmin;
    private javax.swing.JSpinner templimit;
    private javax.swing.JSpinner v3d_freq;
    // End of variables declaration//GEN-END:variables
}
