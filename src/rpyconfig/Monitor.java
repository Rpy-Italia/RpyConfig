/*
* Copyright (C) <2012>  <Marchegiano Danilo>
*
* This file is part of RpyConfig.
*
* RpyConfig is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

package rpyconfig;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.AbstractButton;

/**
 *
 * @author d4n1x
 */
public class Monitor extends javax.swing.JFrame {

    static private Monitor monitor = new Monitor();
    static private arrayMaker array;
    /**
     * Creates new form Monitor
     */
    public Monitor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jLabel3 = new javax.swing.JLabel();
        mode = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        aspect = new javax.swing.JComboBox();
        oleft = new javax.swing.JSpinner();
        otop = new javax.swing.JSpinner();
        oright = new javax.swing.JSpinner();
        obottom = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        rotation = new javax.swing.JComboBox();
        hdmidvimode = new javax.swing.JComboBox();
        mmcea = new javax.swing.JComboBox();
        group = new javax.swing.JComboBox();
        ckmode = new javax.swing.JCheckBox();
        ckaspect = new javax.swing.JCheckBox();
        ckmonochrome = new javax.swing.JCheckBox();
        ckovleft = new javax.swing.JCheckBox();
        ckovright = new javax.swing.JCheckBox();
        ckovtop = new javax.swing.JCheckBox();
        ckovbottom = new javax.swing.JCheckBox();
        ckrotation = new javax.swing.JCheckBox();
        ckgroup = new javax.swing.JCheckBox();
        cksmode = new javax.swing.JCheckBox();
        ckignedid = new javax.swing.JCheckBox();
        ckforceaedid = new javax.swing.JCheckBox();
        ckavoidedidfuzzymatch = new javax.swing.JCheckBox();
        ckignorececinit = new javax.swing.JCheckBox();
        ckignorecec = new javax.swing.JCheckBox();
        ckforcehotplug = new javax.swing.JCheckBox();
        ckignorehotplug = new javax.swing.JCheckBox();
        ckhdmidvimode = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mmdmt = new javax.swing.JComboBox();
        ckreadedidfile = new javax.swing.JCheckBox();
        ckdisable_overscan = new javax.swing.JCheckBox();
        ckframebuffer_width = new javax.swing.JCheckBox();
        ckframebufferheight = new javax.swing.JCheckBox();
        ckframebufferdepth = new javax.swing.JCheckBox();
        framebufferwidth = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        framebufferheight = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        framebufferdepth = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(2, 0), new java.awt.Dimension(2, 0), new java.awt.Dimension(2, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(2, 0), new java.awt.Dimension(2, 0), new java.awt.Dimension(2, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(22, 0), new java.awt.Dimension(22, 0), new java.awt.Dimension(22, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Monitor settings");
        setResizable(false);
        setUndecorated(true);

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getStyle() | java.awt.Font.BOLD, jLabel3.getFont().getSize()+1));
        jLabel3.setText("HDMI");

        mode.setFont(mode.getFont());
        mode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal NTSC", "Japan NTSC", "Normal PAL", "Brazilian PAL" }));
        mode.setEnabled(false);

        jButton2.setFont(jButton2.getFont());
        jButton2.setText("Ok");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ok(evt);
            }
        });

        aspect.setFont(aspect.getFont());
        aspect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "4:3", "14:9", "16:9" }));
        aspect.setEnabled(false);

        oleft.setFont(oleft.getFont());
        oleft.setEnabled(false);
        oleft.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeleft(evt);
            }
        });

        otop.setFont(otop.getFont());
        otop.setEnabled(false);
        otop.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangetop(evt);
            }
        });

        oright.setFont(oright.getFont());
        oright.setEnabled(false);
        oright.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangeright(evt);
            }
        });

        obottom.setFont(obottom.getFont());
        obottom.setEnabled(false);
        obottom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rangebottom(evt);
            }
        });

        jLabel12.setFont(jLabel12.getFont().deriveFont(jLabel12.getFont().getStyle() | java.awt.Font.BOLD, jLabel12.getFont().getSize()+1));
        jLabel12.setText("SDTV");

        rotation.setFont(rotation.getFont());
        rotation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "90 Degrees", "180 Degrees", "270 Degrees" }));
        rotation.setEnabled(false);

        hdmidvimode.setFont(hdmidvimode.getFont());
        hdmidvimode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HDMI", "DVI" }));
        hdmidvimode.setEnabled(false);

        mmcea.setFont(mmcea.getFont());
        mmcea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "VGA", "480p  60Hz", "480p  60Hz  H", "720p  60Hz", "1080i 60Hz", "480i  60Hz", "480i  60Hz  H", "240p  60Hz", "240p  60Hz  H", "480i  60Hz  4x", "480i  60Hz  4x H", "240p  60Hz  4x", "240p  60Hz  4x H", "480p  60Hz  2x", "480p  60Hz  2x H", "1080p 60Hz", "576p  50Hz", "576p  50Hz  H", "720p  50Hz", "1080i 50Hz", "576i  50Hz", "576i  50Hz  H", "288p  50Hz", "288p  50Hz  H", "576i  50Hz  4x", "576i  50Hz  4x H", "288p  50Hz  4x", "288p  50Hz  4x H", "576p  50Hz  2x", "576p  50Hz  2x H", "1080p 50Hz", "1080p 24Hz", "1080p 25Hz", "1080p 30Hz", "480p  60Hz  4x", "480p  60Hz  4xH", "576p  50Hz  4x", "576p  50Hz  4x H", "1080i 50Hz  rb", "1080i 100Hz", "720p  100Hz", "576p  100Hz", "576p  100Hz H", "576i  100Hz", "576i  100Hz H", "1080i 120Hz", "720p  120Hz", "480p  120Hz", "480p  120Hz H", "480i  120Hz", "480i  120Hz H", "576p  200Hz", "576p  200Hz H", "576i  200Hz", "576i  200Hz H", "480p  240Hz", "480p  240Hz H", "480i  240Hz", "480i  240Hz H" }));
        mmcea.setEnabled(false);

        group.setFont(group.getFont());
        group.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Defaul", "CEA", "DMT" }));
        group.setEnabled(false);
        group.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mmceaOnOff(evt);
            }
        });

        ckmode.setText("Monito mode:");
        ckmode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mmodeOnOff(evt);
            }
        });

        ckaspect.setText("Monitor aspect:");
        ckaspect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aspectOnOff(evt);
            }
        });

        ckmonochrome.setText("Monochrome");

        ckovleft.setText("Overscan left:");
        ckovleft.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ovleftOnOff(evt);
            }
        });

        ckovright.setText("Overscan right:");
        ckovright.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orightOnOff(evt);
            }
        });

        ckovtop.setText("Overscan top:");
        ckovtop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                otopOnOff(evt);
            }
        });

        ckovbottom.setText("Overscan bottom:");
        ckovbottom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                obottomOnOff(evt);
            }
        });

        ckrotation.setText("Rotation:");
        ckrotation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rotationOnOff(evt);
            }
        });

        ckgroup.setText("Group mode:");
        ckgroup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupOnOff(evt);
            }
        });

        cksmode.setText("Safe mode");

        ckignedid.setText("Ignore EDID");

        ckforceaedid.setText("Force audio EDID");

        ckavoidedidfuzzymatch.setText("Avoid fuzzy matching of modes described in edid");

        ckignorececinit.setText("Ignore cec init ");

        ckignorecec.setText("Ignore cec");

        ckforcehotplug.setText("Force hotplug");

        ckignorehotplug.setText("Ignore hotplug");

        ckhdmidvimode.setText("HDMI / DVI mode:");
        ckhdmidvimode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hddviOnOff(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 16)); // NOI18N
        jLabel1.setText("SDTV / HDMI");

        jLabel2.setText("Monitor mode (CEA):");

        jLabel4.setText("Monitor mode (DMT):");

        mmdmt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "640x350   85Hz", "640x400   85Hz", "720x400   85Hz", "640x480   60Hz", "640x480   72Hz", "640x480   75Hz", "640x480   85Hz", "800x600   56Hz", "800x600   60Hz", "800x600   72Hz", "800x600   75Hz", "800x600   85Hz", "800x600   120Hz", "848x480   60Hz", "1024x768  60Hz", "1024x768  70Hz", "1024x768  75Hz", "1024x768  85Hz", "1024x768  120Hz", "1152x864  75Hz", "1280x768        rb", "1280x768  60Hz", "1280x768  75Hz", "1280x768  85Hz", "1280x768  120Hz rb", "1280x800        rb", "1280x800  60Hz", "1280x800  75Hz", "1280x800  85Hz", "1280x800  120Hz rb", "1280x960  60Hz", "1280x960  85Hz", "1280x960  120Hz rb", "1280x1024 60Hz", "1280x1024 75Hz", "1280x1024 85Hz", "1280x1024 120Hz rb", "1360x768  60Hz", "1360x768  120Hz rb", "1400x1050       rb", "1400x1050 60Hz", "1400x1050 75Hz", "1400x1050 85Hz", "1400x1050 120Hz rb", "1440x900        rb", "1440x900  60Hz", "1440x900  75Hz", "1440x900  85Hz", "1440x900  120Hz rb", "1600x1200 60Hz", "1600x1200 65Hz", "1600x1200 70Hz", "1600x1200 75Hz", "1600x1200 85Hz", "1600x1200 120Hz rb", "1680x1050       rb", "1680x1050 60Hz", "1680x1050 75Hz", "1680x1050 85Hz", "1680x1050 120Hz rb", "1792x1344 60Hz", "1792x1344 75Hz", "1792x1344 120Hz rb", "1856x1392 60Hz", "1856x1392 75Hz", "1856x1392 120Hz rb", "1920x1200       rb", "1920x1200 60Hz", "1920x1200 75Hz", "1920x1200 85Hz", "1920x1200 120Hz rb", "1920x1440 60Hz", "1920x1440 75Hz", "1920x1440 120Hz rb", "2560x1600       rb", "2560x1600 60Hz", "2560x1600 75Hz", "2560x1600 85Hz", "2560x1600 120Hz rb", "1366x768  60Hz", "1080p     60Hz", "1600x900        rb", "2048x1152       rb", "720p      60Hz", "1366x768        rb" }));
        mmdmt.setEnabled(false);

        ckreadedidfile.setText("Read edid.dat file");

        ckdisable_overscan.setText("Disable oversacn");
        ckdisable_overscan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hideElement(evt);
            }
        });

        ckframebuffer_width.setText("Frame buffer width:");
        ckframebuffer_width.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frembufwidthOnOff(evt);
            }
        });

        ckframebufferheight.setText("Frame buffer height:");
        ckframebufferheight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frmbuffheigthtOnOff(evt);
            }
        });

        ckframebufferdepth.setText("Frame buffer depth:");
        ckframebufferdepth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frmbuffdepthOnOff(evt);
            }
        });

        framebufferwidth.setEnabled(false);

        jLabel5.setText("Pixel");

        framebufferheight.setEnabled(false);

        jLabel6.setText("Pixel");

        framebufferdepth.setEnabled(false);

        jLabel7.setText("Bit");

        jLabel8.setFont(jLabel8.getFont().deriveFont(jLabel8.getFont().getStyle() | java.awt.Font.BOLD, jLabel8.getFont().getSize()+5));
        jLabel8.setText("Monitor settings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ckavoidedidfuzzymatch)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ckgroup)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(16, 16, 16)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel4)
                                                            .addComponent(jLabel2)))
                                                    .addComponent(ckreadedidfile)
                                                    .addComponent(ckhdmidvimode)
                                                    .addComponent(cksmode))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(mmcea, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(mmdmt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(group, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(hdmidvimode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addGap(18, 18, 18)
                                        .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ckforceaedid)
                                            .addComponent(ckignedid)
                                            .addComponent(ckignorecec)
                                            .addComponent(ckignorececinit)
                                            .addComponent(ckforcehotplug)
                                            .addComponent(ckignorehotplug)))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel12)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(12, 12, 12)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addGap(2, 2, 2)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(ckframebuffer_width)
                                                                .addComponent(ckrotation))
                                                            .addGap(21, 21, 21))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(ckframebufferdepth)
                                                                .addComponent(ckframebufferheight))
                                                            .addGap(18, 18, 18)))
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(framebufferheight, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel5))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(framebufferwidth, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel6))
                                                        .addComponent(rotation, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(framebufferdepth, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(jLabel7))))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(596, 596, 596)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(oleft, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(oright, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(otop, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(obottom, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(402, 402, 402)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ckdisable_overscan)
                                                        .addComponent(ckovright)
                                                        .addComponent(ckovleft)
                                                        .addComponent(ckovtop)
                                                        .addComponent(ckovbottom)))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(ckmonochrome)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(ckmode)
                                                            .addGap(62, 62, 62)
                                                            .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(ckaspect)
                                                    .addGap(56, 56, 56)
                                                    .addComponent(aspect, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3))
                                .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(326, 326, 326)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel8)
                .addGap(5, 5, 5)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ckmode)
                        .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ckaspect)
                        .addComponent(aspect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ckmonochrome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckrotation, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rotation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckdisable_overscan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(framebufferwidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(ckframebuffer_width)
                    .addComponent(ckovleft)
                    .addComponent(oleft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(framebufferheight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(ckframebufferheight)
                    .addComponent(ckovright)
                    .addComponent(oright, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(framebufferdepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(ckframebufferdepth)
                    .addComponent(ckovtop)
                    .addComponent(otop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckovbottom)
                    .addComponent(obottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ckgroup)
                                    .addComponent(group, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(mmcea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addComponent(filler1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mmdmt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ckhdmidvimode)
                            .addComponent(hdmidvimode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addComponent(ckreadedidfile)
                        .addGap(12, 12, 12)
                        .addComponent(cksmode))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(filler4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(ckignorecec)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(ckignorececinit)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(ckignedid)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(ckforceaedid)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(ckforcehotplug)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(ckignorehotplug))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckavoidedidfuzzymatch)
                .addGap(10, 10, 10)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ok(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ok

        //This variable is for all the code of this method
        int it=0; //value in integer
        String item; //for obtain the item from jComboBox
        
        //This code is for SDTV
        String sdtv_mode = null; //for sdtv_mode
        String sdtv_aspect = null; //for sdtv_aspect
        String sdtv_disable_colourburst = null; //for sdtv_disable_colourburst
        String overscan_left = null; //for overscan_left
        
        //sdtv_Mode check and create (Normal NTSC, Japan NTSC, Normal PAL, Brazilian PAL)
        if(ckmode.isSelected()){
            sdtv_mode = "sdtv_mode=" + mode.getSelectedIndex();
        }
        
        //sdtv_aspect check and create(4:3, 14:9, 16:9)
        if(ckaspect.isSelected()){
            sdtv_aspect= "sdtv_aspect=" + (aspect.getSelectedIndex()+1);
        }
        
        //sdtv_disable_colourburst check and create 1 is disabled
        if(ckmonochrome.isSelected()){
            sdtv_disable_colourburst = "sdtv_disable_colourburst=1";
        }
        
        /*System.out.print(sdtv_mode + " " + sdtv_aspect + " " + sdtv_disable_colourburst + " " + 
                         overscan_left + " " + overscan_right + " " + overscan_top + " " + 
                         overscan_bottom + " ");*/
        
        //End of code for SDTV
        
        //Code for SDTV/HDMI
        String display_rotate = null;
        String disable_overscan = null;
        String overscan_right = null; //for overscan_right
        String overscan_top = null; //for overscan_top
        String overscan_bottom = null; //for overscan_bottom
        String framebuffer_width = null;
        String framebuffer_height = null;
        String framebuffer_depth = null;
        
        
        //display_rotate Normal, 90 Degrees, 180 Degrees, 270 Degrees
        if(ckrotation.isSelected()){
            display_rotate = "display_rotate=" + rotation.getSelectedIndex();
        }
        
        //ckdisable_overscan
        if(ckdisable_overscan.isSelected()){
            disable_overscan = "disable_overscan=1";
        }else{
            //overscan_left
            if(ckovleft.isSelected()){
                item = oleft.getValue().toString();
                overscan_left = "overscan_left="+item;
            }

            //overscan_right
            if(ckovright.isSelected()){
                item = oright.getValue().toString();
                overscan_right = "overscan_right="+item;
            }

            //overscan_top
            if(ckovtop.isSelected()){
                item = otop.getValue().toString();
                overscan_top = "overscan_top="+item;        
            }

            //overscan_bottom
            if(ckovbottom.isSelected()){
                item = obottom.getValue().toString();
                overscan_bottom = "overscan_bottom="+item;
            }
        }
        
        //framebuffer_width
        if(ckframebuffer_width.isSelected()){
            framebuffer_width = "framebuffer_width=" + framebufferwidth.getValue();
        }
        
        //framebuffer_height
        if(ckframebufferheight.isSelected()){
            framebuffer_height = "framebuffer_height=" + framebufferheight.getValue();
        }

        ////framebuffer_depth
        if(ckframebufferdepth.isSelected()){
            framebuffer_depth = "framebuffer_height=" + framebufferdepth.getValue();
        }
        
        /*System.out.print(display_rotate + " " + disable_overscan + " " + framebuffer_width + " " + framebuffer_height + " " + framebuffer_depth);*/
        
        
        //End of code for SDTV/HDMI
        
        //Code for HDMI
        String hdmi_safe = null;
        String hdmi_group = null;
        String hdmi_mode = null;
        String hdmi_ignore_edid = null;
        String hdmi_force_edid_audio = null;
        String hdmi_edid_file = null;
        String avoid_edid_fuzzy_match = null;
        String hdmi_ignore_cec_init = null;
        String hdmi_ignore_cec = null;
        String hdmi_force_hotplug = null;
        String hdmi_ignore_hotplug = null;
        String hdmi_drive = null;
        
        //hdmi_group defines the HDMI type
        if(ckgroup.isSelected()){
            hdmi_group = "hdmi_group=" + (group.getSelectedIndex());
        }
        
        //These values are valid if hdmi_group=1 (CEA)
        if(ckgroup.isSelected() && group.getSelectedIndex() == 1){
            if(group.getSelectedIndex() == 1 && mmcea.getSelectedIndex() == 0){
                ErroreGroup err = new ErroreGroup();
                err.main(null);
                return;
            }else{
                hdmi_group = "hdmi_group=" + group.getSelectedIndex();
                hdmi_mode = "hdmi_mode=" + mmcea.getSelectedIndex();
            }
        }
        
        //These values are valid if hdmi_group=1 (DMT)
        if(ckgroup.isSelected() && group.getSelectedIndex() == 2){
            if(group.getSelectedIndex() == 2 && mmdmt.getSelectedIndex() == 0){
                ErroreGroup err = new ErroreGroup();
                err.main(null);
                return;
            }else{
                hdmi_group = "hdmi_group=" + (group.getSelectedIndex());
                hdmi_mode = "hdmi_mode=" + mmdmt.getSelectedIndex();
            }
        }
        
        //hdmi_safe chake and create
        if(cksmode.isSelected()){
            hdmi_safe = "hdmi_safe=1";
        }
        
        //hdmi_ignore_edid=0xa5000080
        if(ckignedid.isSelected()){
            hdmi_ignore_edid = "hdmi_ignore_edid=0xa5000080";
        }
        
        //hdmi_force_edid_audio
        if(ckforceaedid.isSelected()){
            hdmi_force_edid_audio = "hdmi_force_edid_audio=1";
        }
        
        //hdmi_edid_file
        if(ckreadedidfile.isSelected()){
            hdmi_edid_file = "hdmi_edid_file=1";
        }
        
        if(ckavoidedidfuzzymatch.isSelected()){
             avoid_edid_fuzzy_match = "avoid_edid_fuzzy_match=1";
        }
        
        //hdmi_ignore_cec_init 
        if(ckignorececinit.isSelected()){
            hdmi_ignore_cec_init = "hdmi_ignore_cec_init=1";
        }
        
        //hdmi_ignore_cec
        if(ckignorecec.isSelected()){
            hdmi_ignore_cec = "hdmi_ignore_cec=1";
        }
        
        //hdmi_force_hotplug
        if(ckforcehotplug.isSelected()){
            hdmi_force_hotplug = "hdmi_force_hotplug=1";
        }
        
        //hdmi_ignore_hotplug
        if(ckignorehotplug.isSelected()){
            hdmi_ignore_hotplug = "hdmi_ignore_hotplug=1";
        }
        
        //hdmi_drive
        if(ckhdmidvimode.isSelected()){
            hdmi_drive = "hdmi_drive=" + (hdmidvimode.getSelectedIndex()+1);
        }
        /*System.out.print(hdmi_safe + " " + hdmi_group + " " +  hdmi_mode + " " +  hdmi_ignore_edid + " " +  
                         hdmi_force_edid_audio + " " +  hdmi_edid_file + " " +  avoid_edid_fuzzy_match + " " +  
                         hdmi_ignore_cec_init + " " +  hdmi_ignore_cec + " " +  hdmi_force_hotplug + " " +  
                         hdmi_ignore_hotplug + " " + hdmi_drive);*/
        //End of code for HDMI
        
        /*Put in the arrya: sdtv_mode, sdtv_aspect, sdtv_disable_colourburst, overscan_left, overscan_right, overscan_top, overscan_bottom, 
        display_rotate, disable_overscan, framebuffer_width, framebuffer_height, framebuffer_depth, hdmi_safe, hdmi_group, hdmi_mode, 
        hdmi_ignore_edid, hdmi_force_edid_audio, hdmi_edid_file, avoid_edid_fuzzy_match, hdmi_ignore_cec_init, hdmi_ignore_cec, 
        hdmi_force_hotplug, hdmi_ignore_hotplug, hdmi_drive*/
        if(sdtv_mode != null) array.addElement(sdtv_mode);
        if(sdtv_aspect != null) array.addElement(sdtv_aspect);
        if(sdtv_disable_colourburst != null) array.addElement(sdtv_disable_colourburst);
        if(overscan_left != null) array.addElement(overscan_left);
        if(overscan_right != null) array.addElement(overscan_right);
        if(overscan_top != null) array.addElement(overscan_top);
        if(overscan_bottom != null) array.addElement(overscan_bottom);
        if(display_rotate != null) array.addElement(display_rotate);
        if(disable_overscan != null) array.addElement(disable_overscan);
        if(framebuffer_width != null) array.addElement(framebuffer_width);
        if(framebuffer_height != null) array.addElement(framebuffer_height);
        if(framebuffer_depth != null) array.addElement(framebuffer_depth);
        if(hdmi_safe != null) array.addElement(hdmi_safe);
        if(hdmi_group != null) array.addElement(hdmi_group);
        if(hdmi_mode != null) array.addElement(hdmi_mode);
        if(hdmi_ignore_edid != null) array.addElement(hdmi_ignore_edid);
        if(hdmi_force_edid_audio != null) array.addElement(hdmi_force_edid_audio);
        if(hdmi_edid_file != null) array.addElement(hdmi_edid_file);
        if(avoid_edid_fuzzy_match != null) array.addElement(avoid_edid_fuzzy_match);
        if(hdmi_ignore_cec_init != null) array.addElement(hdmi_ignore_cec_init);
        if(hdmi_ignore_cec != null) array.addElement(hdmi_ignore_cec);
        if(hdmi_force_hotplug != null) array.addElement(hdmi_force_hotplug);
        if(hdmi_ignore_hotplug != null) array.addElement(hdmi_ignore_hotplug);
        if(hdmi_drive != null) array.addElement(hdmi_drive);
        
        //close monitor
        monitor.setVisible(false);
    }//GEN-LAST:event_ok

    private void hideElement(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hideElement
        if(ckdisable_overscan.isSelected()){
            ckovbottom.setVisible(false);
            ckovtop.setVisible(false);
            ckovleft.setVisible(false);
            ckovright.setVisible(false);
            oleft.setVisible(false);
            otop.setVisible(false);
            oright.setVisible(false);
            obottom.setVisible(false);
            ckovbottom.setSelected(false);
            ckovtop.setSelected(false);
            ckovleft.setSelected(false);
            ckovright.setSelected(false);
            oleft.setEnabled(false);
            otop.setEnabled(false);
            oright.setEnabled(false);
            obottom.setEnabled(false);
        }else{
            ckovbottom.setVisible(true);
            ckovtop.setVisible(true);
            ckovleft.setVisible(true);
            ckovright.setVisible(true);
            oleft.setVisible(true);
            otop.setVisible(true);
            oright.setVisible(true);
            obottom.setVisible(true);        
        }
    }//GEN-LAST:event_hideElement

    private void mmodeOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mmodeOnOff
        if(ckmode.isSelected()){
            mode.setEnabled(true);
        }else mode.setEnabled(false);
        mode.repaint();
    }//GEN-LAST:event_mmodeOnOff

    private void aspectOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aspectOnOff
        if(ckaspect.isSelected()){
            aspect.setEnabled(true);
        }else aspect.setEnabled(false);
        aspect.repaint();
    }//GEN-LAST:event_aspectOnOff

    private void groupOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupOnOff
        if(ckgroup.isSelected()){
            group.setEnabled(true);
        }else group.setEnabled(false);
        group.repaint();
    }//GEN-LAST:event_groupOnOff

    private void mmceaOnOff(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mmceaOnOff
        if(group.getSelectedItem().equals("CEA")){
            mmcea.setEnabled(true);
        }else mmcea.setEnabled(false);
        mmcea.repaint();
        
        if(group.getSelectedItem().equals("DMT")){
            mmdmt.setEnabled(true);
        }else mmdmt.setEnabled(false);
        mmdmt.repaint();
    }//GEN-LAST:event_mmceaOnOff

    private void ovleftOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ovleftOnOff
        if(ckovleft.isSelected()){
            oleft.setEnabled(true);
        }else oleft.setEnabled(false);
        oleft.repaint();
    }//GEN-LAST:event_ovleftOnOff

    private void obottomOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_obottomOnOff
        if(ckovbottom.isSelected()){
            obottom.setEnabled(true);
        }else obottom.setEnabled(false);
        obottom.repaint();
    }//GEN-LAST:event_obottomOnOff

    private void otopOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_otopOnOff
        if(ckovtop.isSelected()){
            otop.setEnabled(true);
        }else otop.setEnabled(false);
        otop.repaint();
    }//GEN-LAST:event_otopOnOff

    private void orightOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orightOnOff
        if(ckovright.isSelected()){
            oright.setEnabled(true);
        }else oright.setEnabled(false);
        oright.repaint();
    }//GEN-LAST:event_orightOnOff

    private void hddviOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hddviOnOff
        if(ckhdmidvimode.isSelected()){
            hdmidvimode.setEnabled(true);
        }else hdmidvimode.setEnabled(false);
        hdmidvimode.repaint();
    }//GEN-LAST:event_hddviOnOff

    private void rotationOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rotationOnOff
        if(ckrotation.isSelected()){
            rotation.setEnabled(true);
        }else rotation.setEnabled(false);
        rotation.repaint();
    }//GEN-LAST:event_rotationOnOff

    private void frembufwidthOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frembufwidthOnOff
        if(ckframebuffer_width.isSelected()){
            framebufferwidth.setEnabled(true);
        }else framebufferwidth.setEnabled(false);
        framebufferwidth.repaint();
    }//GEN-LAST:event_frembufwidthOnOff

    private void frmbuffheigthtOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frmbuffheigthtOnOff
        if(ckframebufferheight.isSelected()){
            framebufferheight.setEnabled(true);
        }else framebufferheight.setEnabled(false);
        framebufferheight.repaint();
    }//GEN-LAST:event_frmbuffheigthtOnOff

    private void frmbuffdepthOnOff(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frmbuffdepthOnOff
        if(ckframebufferdepth.isSelected()){
            framebufferdepth.setEnabled(true);
        }else framebufferdepth.setEnabled(false);
        framebufferdepth.repaint();
    }//GEN-LAST:event_frmbuffdepthOnOff

    private void rangeleft(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeleft
        
        Integer val = (Integer) oleft.getValue();
        if(val > 100 || val < -100){
            new errorEmpety().main(null);
            if(val > 100) oleft.setValue("100");
            if(val < -100) oleft.setValue("-100");
        }
    }//GEN-LAST:event_rangeleft

    private void rangetop(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangetop
        Integer val = (Integer) otop.getValue();
        if(val > 100 || val < -100){
            new errorEmpety().main(null);
            if(val > 100) otop.setValue("100");
            if(val < -100) otop.setValue("-100");
        }
    }//GEN-LAST:event_rangetop

    private void rangeright(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangeright
        Integer val = (Integer) oright.getValue();
        if(val > 100 || val < -100){
            new errorEmpety().main(null);
            if(val > 100) oright.setValue("100");
            if(val < -100) oright.setValue("-100");
        }
    }//GEN-LAST:event_rangeright

    private void rangebottom(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rangebottom
        Integer val = (Integer) obottom.getValue();
        if(val > 100 || val < -100){
            new errorEmpety().main(null);
            if(val > 100) obottom.setValue("100");
            if(val < -100) obottom.setValue("-100");
        }
    }//GEN-LAST:event_rangebottom

    /**
     * @param args the command line arguments
     */
    
    public static void main(arrayMaker mkArray) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Monitor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        array = mkArray;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    
                // Determine the new location of the window
                int w = monitor.getSize().width;
                int h = monitor.getSize().height;
                int x = (dim.width-w)/2;
                int y = (dim.height-h)/2;
    
                // Move the window
                monitor.setLocation(x, y);
                monitor.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox aspect;
    private javax.swing.JCheckBox ckaspect;
    private javax.swing.JCheckBox ckavoidedidfuzzymatch;
    private javax.swing.JCheckBox ckdisable_overscan;
    private javax.swing.JCheckBox ckforceaedid;
    private javax.swing.JCheckBox ckforcehotplug;
    private javax.swing.JCheckBox ckframebuffer_width;
    private javax.swing.JCheckBox ckframebufferdepth;
    private javax.swing.JCheckBox ckframebufferheight;
    private javax.swing.JCheckBox ckgroup;
    private javax.swing.JCheckBox ckhdmidvimode;
    private javax.swing.JCheckBox ckignedid;
    private javax.swing.JCheckBox ckignorecec;
    private javax.swing.JCheckBox ckignorececinit;
    private javax.swing.JCheckBox ckignorehotplug;
    private javax.swing.JCheckBox ckmode;
    private javax.swing.JCheckBox ckmonochrome;
    private javax.swing.JCheckBox ckovbottom;
    private javax.swing.JCheckBox ckovleft;
    private javax.swing.JCheckBox ckovright;
    private javax.swing.JCheckBox ckovtop;
    private javax.swing.JCheckBox ckreadedidfile;
    private javax.swing.JCheckBox ckrotation;
    private javax.swing.JCheckBox cksmode;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JSpinner framebufferdepth;
    private javax.swing.JSpinner framebufferheight;
    private javax.swing.JSpinner framebufferwidth;
    private javax.swing.JComboBox group;
    private javax.swing.JComboBox hdmidvimode;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JComboBox mmcea;
    private javax.swing.JComboBox mmdmt;
    private javax.swing.JComboBox mode;
    private javax.swing.JSpinner obottom;
    private javax.swing.JSpinner oleft;
    private javax.swing.JSpinner oright;
    private javax.swing.JSpinner otop;
    private javax.swing.JComboBox rotation;
    // End of variables declaration//GEN-END:variables
}
